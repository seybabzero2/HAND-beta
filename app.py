from flask import Flask, render_template, request, jsonify
import subprocess
import os
import json
import shlex
from datetime import datetime
import glob
import pandas as pd

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/forecast', methods=['POST'])
def api_forecast():
    try:
        data = request.get_json()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ['lat_min', 'lat_max', 'lon_min', 'lon_max', 'target_date', 'region']
        for field in required_fields:
            if field not in data:
                return jsonify({'success': False, 'error': f'Missing field: {field}'}), 400
        
        # –ë—É–¥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è predicts.py
        cmd = [
            'python3', 'predicts.py',
            '--lat', str(data['lat_min']), str(data['lat_max']),
            '--lon', str(data['lon_min']), str(data['lon_max']),
            '--target-date', data['target_date'],
            '--region', data['region'],
            '--start', data.get('start_date', '2020-01-01'),
            '--end', data.get('end_date', datetime.now().strftime('%Y-%m-%d')),
            '--no-download'
        ]
        
        print(f"üîß –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ predicts.py —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–≤—ñ–¥
        process = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if process.returncode == 0:
            # –£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            output = process.stdout
            
            # –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ CSV-—Ñ–∞–π–ª
            csv_data = parse_csv_forecast(data['region'], data['target_date'])
            
            if csv_data:
                # –Ø–∫—â–æ CSV –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                metrics = calculate_metrics(csv_data)
                print(f"‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ CSV: {csv_data['csv_file']}")
            else:
                # –Ü–Ω–∞–∫—à–µ –ø–∞—Ä—Å–∏–º–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥
                parsed_data = parse_output(output)
                metrics = calculate_metrics(parsed_data)
                print("‚ö†Ô∏è CSV –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Å–æ–ª—ñ")
            
            return jsonify({
                'success': True,
                'data': metrics,  # –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - 'data'
                'console_output': output,
                'raw_output': output,
                'source': 'csv' if csv_data else 'console'
            })
        else:
            # –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            return jsonify({
                'success': False,
                'error': process.stderr,
                'console_output': process.stdout + "\n\n" + process.stderr
            }), 500
            
    except subprocess.TimeoutExpired:
        return jsonify({
            'success': False, 
            'error': 'Timeout: –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–∏—Å',
            'console_output': '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è (300 —Å–µ–∫—É–Ω–¥)'
        }), 500
    except Exception as e:
        return jsonify({
            'success': False, 
            'error': str(e),
            'console_output': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'
        }), 500

def parse_csv_forecast(region, target_date):
    """
    –ß–∏—Ç–∞—î CSV-—Ñ–∞–π–ª –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π predicts.py
    –¢–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î WScore
    """
    import pandas as pd
    import glob
    
    # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
    safe_region = region.replace(" ", "_").replace(",", "")
    filename_pattern = f'forecast_{safe_region}_{target_date}.csv'
    
    # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª
    csv_files = glob.glob(filename_pattern)
    if not csv_files:
        csv_files = glob.glob('forecast_*.csv')
        if csv_files:
            csv_files.sort(key=os.path.getmtime, reverse=True)
            csv_file = csv_files[0]
            print(f"üîç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π CSV —Ñ–∞–π–ª: {csv_file}")
        else:
            print("‚ùå CSV —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return None
    else:
        csv_file = csv_files[0]
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª: {csv_file}")
    
    try:
        df = pd.read_csv(csv_file)
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –≤ CSV: {list(df.columns)}")
        
        if len(df) > 0:
            row = df.iloc[0]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø–æ–ª—è
            result = {
                'temperature': float(row.get('temperature', 0)),
                'precipitation': float(row.get('precipitation', 0)),
                'wind_speed': float(row.get('wind_speed', 0)),
                'humidity': float(row.get('humidity', 0)),
                'snow_water': float(row.get('snow_water', 0)),
                'pressure': float(row.get('pressure', 0)) if 'pressure' in row else 1013.25,
                'csv_file': csv_file
            }
            
            # –î–æ–¥–∞—î–º–æ WScore —è–∫—â–æ –≤—ñ–Ω —î
            if 'wscore' in row:
                result['wscore'] = float(row['wscore'])
                print(f"‚úÖ WScore –∑–Ω–∞–π–¥–µ–Ω–æ: {row['wscore']}")
            
            # –î–æ–¥–∞—î–º–æ comfort_description —è–∫—â–æ –≤—ñ–Ω —î
            if 'comfort_description' in row:
                result['comfort_description'] = str(row['comfort_description'])
                print(f"‚úÖ Comfort description: {row['comfort_description']}")

            print(f"üìã –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ CSV: { {k: v for k, v in result.items() if k != 'csv_file'} }")
            return result
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}")
        return None
    
    return None

def parse_output(output):
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤–∏–≤—ñ–¥ predicts.py –¥–ª—è –≤–∏—Ç—è–≥—É –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É
    """
    lines = output.split('\n')
    data = {}
    
    for line in lines:
        if ':' in line and '===' not in line and '–†–ò–ó–ò–ö' not in line:
            parts = line.split(':', 1)
            if len(parts) == 2:
                key = parts[0].strip()
                value = parts[1].strip()
                
                # –í–∏–ª—É—á–∞—î–º–æ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É
                for unit in ['¬∞C', 'mm/day', 'm/s', '%', 'kg/m¬≤']:
                    value = value.replace(unit, '').strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ –¥–æ–≤—ñ—Ä—á–∏–º —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                if '–î–æ–≤—ñ—Ä—á–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª' in key:
                    continue
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ
                try:
                    data[key] = float(value)
                except:
                    data[key] = value
    
    return data

def calculate_metrics(data):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö
    –¢–µ–ø–µ—Ä –≤–∫–ª—é—á–∞—î WScore
    """
    temp = float(data.get('temperature', 0))
    wind = float(data.get('wind_speed', 0))
    humidity = float(data.get('humidity', 0))
    precip = float(data.get('precipitation', 0))
    
    print(f"üìä –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫:")
    print(f"  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
    print(f"  –í—ñ—Ç–µ—Ä: {wind} m/s ({wind * 3.6:.1f} km/h)")
    print(f"  –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%")
    print(f"  –û–ø–∞–¥–∏: {precip} mm/day")
    
    # –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ—Ç—Ä–∏–∫
    result = {
        'temperature': round(temp, 1),
        'precipitation': round(precip, 1),
        'wind_speed': round(wind, 1),
        'wind_speed_kmh': round(wind * 3.6, 1),
        'humidity': round(humidity, 1),
        'confidence': 85.5
    }
    
    # –î–æ–¥–∞—î–º–æ WScore –¥–æ —Å—Ç–∞—Ä–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —è–∫—â–æ –≤—ñ–Ω —î
    if 'wscore' in data:
        result['wscore'] = round(float(data['wscore']), 1)
        print(f"  üéØ WScore: {data['wscore']}")
    
    # –î–æ–¥–∞—î–º–æ comfort_description —è–∫—â–æ –≤—ñ–Ω —î
    if 'comfort_description' in data:
        result['comfort_description'] = data['comfort_description']
        print(f"  üìù Comfort: {data['comfort_description']}")

    if 'specific_conditions' in data:
        result['specific_conditions'] = data['specific_conditions']
    
    # –°—Ç–∞—Ä—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
    # –°–ø–µ–∫–∞: —è–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ > 30¬∞C
    if temp > 30:
        hot_perc = min(100, (temp - 30) * 10)
    elif temp > 20:
        hot_perc = (temp - 20) * 5
    else:
        hot_perc = 0
    
    # –•–æ–ª–æ–¥: —è–∫—â–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ < 0¬∞C
    if temp < 0:
        cool_perc = min(100, abs(temp) * 10)
    elif temp < 10:
        cool_perc = (10 - temp) * 3
    else:
        cool_perc = 0
    
    # –í—ñ—Ç–µ—Ä: –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ m/s –≤ km/h —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ > 30 km/h
    wind_kmh = wind * 3.6
    if wind_kmh > 30:
        wind_perc = min(100, (wind_kmh - 30) * 3)
    elif wind_kmh > 20:
        wind_perc = (wind_kmh - 20) * 2
    else:
        wind_perc = 0
    
    # –í–æ–ª–æ–≥—ñ—Å—Ç—å: —è–∫—â–æ > 80%
    if humidity > 80:
        humid_perc = min(100, (humidity - 80) * 5)
    elif humidity > 60:
        humid_perc = (humidity - 60) * 2
    else:
        humid_perc = 0
    
    # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏
    result.update({
        'hot_perc': round(hot_perc, 1),
        'cool_perc': round(cool_perc, 1),
        'wind_perc': round(wind_perc, 1),
        'humid_perc': round(humid_perc, 1),
        'max_temp': round(temp + 5, 1)
    })
    
    print(f"  üî• –°–ø–µ–∫–∞: {hot_perc:.1f}%")
    print(f"  ‚ùÑÔ∏è –•–æ–ª–æ–¥: {cool_perc:.1f}%")
    print(f"  üí® –í—ñ—Ç–µ—Ä: {wind_perc:.1f}%")
    print(f"  üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humid_perc:.1f}%")
    
    return result

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)